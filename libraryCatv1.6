import urllib.request, urllib.parse, urllib.error
from bs4 import BeautifulSoup
from tkinter import *
from tkinter import ttk
import json
import ssl


# Library Cat Ver. 1.6

# 1. Accesses the webpage
# 2. Performs a search (for example on a topic)
# 3. Pulls json data from that search
#         New: Extracts only the Entities key from dictionary
# 4. Organizes the json data into title, author, format, description ...
#          New: Adds new function to store data once all needed fields are filled
# 5. Prints out the above organized data
# 6. Prints a list of only the format wanted. Eg: books (but not properly sifted)
# 7. sorts through materials and prints out only the books (or other desired items)
# 8. Move all code into discrete functions
# 9. remove one of the list depths in the output
# 10. allow for two search terms
# 11. Allow for multiple search terms
# 12. Build an interface which can accept input and then run the input through the program
# 13. Fix the structure of the code: keep the main program out of the mainwindow class
# 14. work on getting all results printed to screen (back to books only to simply set up of interface)
# 15. Improve interface: set up columns which can be updated with results and which dynamically resize
# 16. Improve printout formatting, remove extra marks (eg: ' and " and { } ) and create proper spacing between data points
# 17. Post two pages worth of search terms to the interface (currently prints out page 1's results twice)
#       17 a. Post page 1 and page 2 results to interface (note can not do more than 2 pages, results are flipped: page 2, then page 1)
#       17 b. Post 3 pages of results. Two pages is often not enough
# 18. Add publication date field to print out
# 19. Remove extra space added at begining of each item on printout
# 20. Improve colour and font


###### Fundamental Program Flow ##########
# The root is looping inside of the mainwindow class. The Mainwindow init sets up the interface and contains a call to the bindings() method
# (this is continually called). Bindings() in turn calls self.getSearchTerms()
# which checks if the input in the interface has had the enter key pressed and takes the input terms.
# Self.getSearchTerms() then runs the actual program (mainprogram()) with those search terms which also returns the results. Those results are then sent to the text.input of the interface and displayed.

# Main() --> Mainwindow --> self.bindings() method --> self.getSearchTerms() --> mainprogram() --> ProgramFlow() --> returns results to mainProgram()


class MainWindow:
    def __init__(self, master):

        # Master Window
        self.master = master
        self.master.title('Library Cat V. 1.6')
        self.master.geometry("+200+450")  # position of window in the screen
        self.master.geometry("1500x700")  # set size of root window (master)

        # Search Bar
        self.frame = ttk.Frame(master)
        self.label = ttk.Label(self.frame, text="Search:")
        self.label.grid(row='0', column=0)
        self.frame.grid(row=0, column=1,columnspan = 2)
        self.frame.config(width=500, height=100, )
        self.frame.config(relief=RIDGE)
        self.entry = ttk.Entry(self.frame, width='100')
        self.entry.grid(row=0, column=1)
        self.bindings(master)  # the bindings() function initiates the whole program flow by checking if the return key has been depressed in the interface

        # Instantiate frames
        self.frame1 = Frame(master,  width=100, height=40)
        self.frame2 = Frame(master, width=100, height=40)
        self.frame3 = Frame(master, width=100, height=40)
        self.frame4 = Frame(master, width=100, height=40)

        # Place frames
        self.frame1.grid(row=1, column=0, sticky="nsew")
        self.frame2.grid(row=1, column=1, sticky="nsew")
        self.frame3.grid(row=1, column=2, sticky="nsew")
        self.frame4.grid(row=1, column=3, sticky="nsew")

        # configure weighting of frames
        self.master.grid_columnconfigure(0, weight=1)
        self.master.grid_columnconfigure(1, weight=1)
        self.master.grid_columnconfigure(2, weight=1)
        self.master.grid_columnconfigure(3, weight=1)

        # Set up text boxes
        self.text1 = Text(self.frame1, bg='#112233', fg='white')
        self.text1.insert(INSERT, '')
        self.text1.grid_columnconfigure(0, weight=2)
        self.text1.grid_rowconfigure(0, weight=2)
        self.text1.config(wrap='word')
        self.text1.pack()

        self.text2 = Text(self.frame2, bg='#112233', fg='white')
        self.text2.insert(INSERT, '')
        self.text2.grid_columnconfigure(0, weight=2)
        self.text2.grid_rowconfigure(0, weight=2)
        self.text2.config(wrap='word')
        self.text2.pack()

        self.text3 = Text(self.frame3, bg='#112233', fg='white')
        self.text3.insert(INSERT, '')
        self.text3.grid_columnconfigure(0, weight=2)
        self.text3.grid_rowconfigure(0, weight=2)
        self.text3.grid_rowconfigure(0, weight=2)
        self.text3.config(wrap='word')
        self.text3.pack()

        self.text4 = Text(self.frame4, bg='#112233', fg='white')
        self.text4.insert(INSERT, '')
        self.text4.grid_columnconfigure(0, weight=2)
        self.text4.grid_rowconfigure(0, weight=2)
        self.text4.grid_rowconfigure(0, weight=2)
        self.text4.config(wrap='word')
        self.text4.pack()

        # self.text.config(wrap='word')

    def bindings(self, master):
        # This function checks for the return key and then initiates the getSearchTerms() function which in turn does most of the important calls
        self.entry.bind('<Return>', lambda event: self.getSearchTerms())

    def getSearchTerms(self):

        # this function is central to the program's function as it gets the search terms and then runs the program with those terms:
        # 1. gets search terms
        # 2. runs program with search terms
        # 3. sends results to the screen printout function (updateResults())

        searchTerms = self.entry.get()
        self.results = programFlow(searchTerms, 3) # 1. send searchTerms; 2. specify number of pages of results
        print('\nResults from main program and sent to interface:', self.results)
        self.updateResults(self.results)

    # Important Task: if the item popped is None and is then sent to the .insert(), the insert method comes to a grinding halt. Therefore all popped items need to be checked for None first.
    def updateResults(self, results):
        # inserts search results into text boxes of interface
        count = 0
        for tup in results:
            for list1 in tup:  # pop individual items from the list as a stack b/c text.insert() reverses the order of the print out.
                for item in list1:
                    if item[0] == 'BK':
                        while len(item) > 0:
                            x = item.pop()  # cache popped item
                            if x == None:  # Check if popped item is None
                                x = ' '  # if None, replace with empty string (so as to avoid tkinter error: .insert() can not accept None values)
                            self.text1.insert(1.0, x)
                            if x != 'BK':  # Removes space at beginning of line; only put space for all elements except the category type ie. BK.
                                self.text1.insert(1.0, ' ')
                        self.text1.insert(1.0, ' \n')
                    elif item[0] == 'DVD':
                        while len(item) > 0:
                            x = item.pop()  # cache popped item
                            if x == None:  # Check if popped item is None
                                x = ' '  # if None, replace with empty string (so as to avoid tkinter error: .insert() can not accept None values)
                            self.text2.insert(1.0, x)
                            if x != 'DVD':
                                self.text2.insert(1.0, ' ')  # insert space between item's info: BK Author Title
                        self.text2.insert(1.0, ' \n')
                    elif item[0] == 'BLURAY':
                        while len(item) > 0:
                            x = item.pop()  # cache popped item
                            if x == None:  # Check if popped item is None
                                x = ' '  # if None, replace with empty string (so as to avoid tkinter error: .insert() can not accept None values)
                            self.text3.insert(1.0, x)
                            if x != 'BLURAY':
                                self.text3.insert(1.0, ' ')  # insert space between item's info: BK Author Title
                        self.text3.insert(1.0, ' \n')
                    else:
                        while len(item) > 0:
                            x = item.pop()  # cache popped item
                            if x == None:  # Check if popped item is None
                                x = ' '  # if None, replace with empty string (so as to avoid tkinter error: .insert() can not accept None values)
                            self.text4.insert(1.0, x)
                            if x != 'MUSIC_CD':
                                self.text4.insert(1.0, ' ')  # insert space between item's info: BK Author Title
                        self.text4.insert(1.0, ' \n')

                # for item in item[1]:  # pop individual items from the list as a stack b/c text.insert() reverses the order of the print out.
            #     while len(item) > 0:
            #         x = item.pop()
            #         if x == None:
            #             x = ' '
            #         self.text2.insert(1.0, x)
            #         self.text2.insert(1.0, ' ')
            #     self.text2.insert(1.0, ' \n')
            # for item in item[2]:  # pop individual items from the list as a stack b/c text.insert() reverses the order of the print out.
            #     while len(item) > 0:
            #         x = item.pop()
            #         if x == None:
            #             x = ' '
            #         self.text3.insert(1.0, x)
            #         self.text3.insert(1.0, ' ')
            #     self.text3.insert(1.0, ' \n')
            # for item in item[3]:  # pop individual items from the list as a stack b/c text.insert() reverses the order of the print out.
            #     while len(item) > 0:
            #         x = item.pop()
            #         if x == None:
            #             x = ' '
            #         # print('sector 3 of tuple, item sent to insert:',x)
            #         self.text4.insert(1.0, x)
            #         self.text4.insert(1.0, ' ')
            #     self.text4.insert(1.0, ' \n')



def twoSearchTerms(searchTerms):
    # determines if multiple search terms were inputted

    # if more than one search term, return true
    # if one search term only, return false
    if len(searchTerms.strip().split(' ')) > 1:
        return True
    else:
        return False


def listOfSearchTerms(searchTerms):
    return searchTerms.split(' ')


def performSearch(searchTerms, numOfResultPages, pagesAccessedCounter):
    '''This function composes the correct url command for any number of search terms given
       inputs: str: searchTerms; int: numOfResultPages (number of pages of catalogue results to print to interface); counter for number of times program has accessed website (comes from programFlow())
       outputs: html of whole website for the given search terms
    '''
    # ignore ssl cert errors
    ctx = ssl.create_default_context()
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE
    # convert all search terms to list form
    termsList = listOfSearchTerms(searchTerms)
    # base url without any search terms added
    url = 'https://epl.bibliocommons.com/v2/search?query='

    # if only one search term is given, take base url + search term
    # if multiple search terms given take base url + 1st search term, then add the remaining
    # search terms with %20 preceding them until all terms have been added
    if twoSearchTerms == False:
        url = url + termsList[0]
        return url
    else:
        url = url + termsList[0]
        c = 1
        while c < len(termsList):
            url = url + '%20' + termsList[c]
            c += 1

    #  composes URL for more than one page of results (currently only up to 2 pages)
    if numOfResultPages > 1: #  composing url for page 1, page 2 etc of catalogue results
        #  if looking for more than one page of results
        if pagesAccessedCounter == 0: #  if calling for first page of results
            html = urllib.request.urlopen(url, context=ctx).read()
            return html
        elif pagesAccessedCounter == 1: #  if calling for 2nd page or more
                      url = url + '&page=2'
                      html = urllib.request.urlopen(url, context=ctx).read()
                      return html
        elif pagesAccessedCounter == 2: #  if calling for 2nd page or more
                      url = url + '&page=3'
                      html = urllib.request.urlopen(url, context=ctx).read()
                      return html

    else: #  if the original setting for the program is to only get 1 page of results (techincally not neccessary to have this clause)

        html = urllib.request.urlopen(url, context=ctx).read()
        return html


def parseHTML(html):
    cleanhtml = BeautifulSoup(html, 'html.parser')

    return cleanhtml


def getJsonData(cleanhtml):
    #### Use .find() with arguments to pinpoint tags: cleanhtml.find(type="application/json") ####
    jsonData = cleanhtml.find(type="application/json")  # .contents gets only contents, however it is in a list
    return jsonData


# Need to remove the "<script>" tags, try .text (doesn't seem to work) also try extract().
# extracts front and end script tags
# data from cleanhtml begins thus: <script data-iso-key="_0" type="application/json">{"app":{"coreAssets":{"cdnHost":....
# note the <script.... html tag at beginning (and end, not shown) which needs to be removed
def remove_tags(data):
    for items in data:
        # Remove tags
        return items.extract()

        # cut out first key of dataDict (which contains no needed info) and give only the 'entities' key which


# contains the items needed.
# Output: dictionary of entities.
# not a highly neccessary step in the program

def accessEntitiesKey(dictionary):
    for (k, v) in dictionary.items():
        if k == 'entities':  # enter "entities" key
            entities = {k: v}
    return entities


# searches through all keys of the dictionary by type
def recursive_items(dictionary):
    for key, value in dictionary.items():
        if type(value) is dict:
            yield (key, value)
            yield from recursive_items(value)
        else:
            yield (key, value)


# Fixed boolean condition suite with (form...or...)
def storeData(form, author, title, subtitle, description,date):
    '''
    This function  checks if all desired data items have been filled then returns a list of all those items.
    Inputs: string of: form,author,title,subtitle,description
    Outputs: if all and only all desired items are present it returns a list of those items; if all items are not present (if empty or missing anything,
     it returns an empty list []
    '''
    # note: if the format (ie form) is not one of the types checked for this will throw off the proper correspondance  between  the data points.
    #  A book title will not correspond to the correct author and so on.
    if author != 1 and title != 1 and subtitle != 1 and description != 1 and date != 1 and (
            form == 'VIDEO_ONLINE' or form == 'BK' or form == 'GRAPHIC_NOVEL' or form == 'EBOOK' or form == 'MUSIC_ONLINE' or form == 'MUSIC_CD' or form == 'BLURAY' or form == 'DVD' or form == 'DIGITAL_SCORE' or form == 'AB_ONLINE' or form == 'BOOK_CD' or form == 'AB'):
        return [form, author, title, subtitle,date]
    else:
        return []


def getBooks(materials):
    if materials[0] == 'BK':
        return materials


def getCDs(materials):
    if materials[0] == 'MUSIC_CD':
        return materials


def getEbooks(materials):
    if materials[0] == 'EBOOK':
        return materials


def getGraphicNovels(materials):
    if materials[0] == 'GRAPHIC_NOVEL':
        return materials


def getVideos(materials):
    if materials[0] == 'VIDEO_ONLINE':
        return materials


def getDVDs(materials):
    if materials[0] == 'DVD':
        return materials


def getBlurays(materials):
    if materials[0] == 'BLURAY':
        return materials


def getAudioBooks(materials):
    if materials[0] == 'AB':
        return materials


def printResults(books, videos, eBooks, DVDs, blurays, CDs, graphicNovels, audioBooks):
    for item in books:
        print(item)
    print()
    for item in videos:
        print(item)
    print()
    for item in eBooks:
        print(item)
    print()
    for item in DVDs:
        print(item)
    print()
    for item in blurays:
        print(item)
    print()
    for item in graphicNovels:
        print(item)
    print()
    for item in CDs:
        print(item)
    for item in audioBooks:
        print(item)

def programFlow(searchTerms,numOfResultPages):

    '''
    This calls all of the functions to access the search terms, access the internet, compose the correct urls and filter all of the results
    and return those results.
    Inputs: str: searchTerms, int: numOfResultPages (number of pages of results from the online catalogue
    Outputs: a list with two tuples: [(),()]. each tuple is one page of results from the main website.
    each tuple in turn contains a list of the books, a list of the dvds etc: [([bk],[bk],[bk],[dvd]),([bk],[dvd],[bluray],[ebook])]
    '''
    results = [] # empty list for appending results of search
    # numOfResultPages += 1 # increment number desired by one so as to run while loop
    c = 0
    while c < numOfResultPages:

        getHTML = performSearch(searchTerms,numOfResultPages, c)

        print('accessing website\n')

        cleanHTML = parseHTML(getHTML)
        extractedJson = getJsonData(cleanHTML)
        jsonDataNoTags = remove_tags(extractedJson)

        print('Pulling json data from catalogue\n')

        # Convert jsonData into a python dictionary
        dataDict = json.loads(jsonDataNoTags)
        # filter out keys which precede the "entities" key
        entities = accessEntitiesKey(dataDict)

        books = []
        DVDs = []
        blurays = []
        graphicNovels = []
        CDs = []
        eBooks = []
        videos = []
        audioBooks = []

        author = 1
        title = 1
        subtitle = 1
        form = 1
        description = 1
        date = 1

        # extrapolating key data fields
        # input entities-dict into recursive search of keys and values for all sub-dictionaries
        for key, value in recursive_items(entities):

            if key == 'authors':
                author = value
                print(key, value)
            if key == 'title':
                title = value
                print(key, value, )
            if key == 'subtitle':
                subtitle = value
                print(key, value)
            if key == 'format':
                form = value
                print(key, value)
            if key == 'description':
                description = value
            if key == 'publicationDate':
                date = value
                # print(key, value)

            # checks if all values above have been filled, if all are not full, it will return an empty list
            # therefore the list will either be full of all needed values or totally empty

            materials = storeData(form, author, title, subtitle, description,date)

            # determine if list from storeData is a book, video etc. and store in ID
            if materials != []:
                # getBooks() determines if the list from storeData is a book ('BK'); if the list from
                # storeData is not a book it returns None, and if so, the None object will actually get inserted
                # as an item into the new list (books) causing the list to fill up with None objects

                print(materials, '\n')
                if getBooks(materials) != None:
                    books.append(getBooks(materials))
                if getDVDs(materials) != None:
                    DVDs.append(getDVDs(materials))
                if getBlurays(materials) != None:
                    blurays.append(getBlurays(materials))
                if getGraphicNovels(materials) != None:
                    graphicNovels.append(getGraphicNovels(materials))

                if getCDs(materials) != None:
                    CDs.append(getCDs(materials))
                if getEbooks(materials) != None:
                    eBooks.append(getEbooks(materials))
                if getVideos(materials) != None:
                    videos.append(getVideos(materials))
                if getAudioBooks(materials) != None:
                    audioBooks.append(getAudioBooks(materials))

                    # if books != None:
                    # print(books)
                # if graphicNovels != None:
                # print(graphicNovels)
                # if CDs != None:
                # print(Cds)
                # if eBooks != None:
                # print(eBooks)
                # if videos != None:
                # print(videos)

                form = 1
                author = 1
                title = 1
                subtitle = 1
                description = 1
                date = 1

        printResults(books, videos, eBooks, DVDs, blurays, CDs, graphicNovels, audioBooks)
        results.append((books, DVDs, blurays, CDs))
        c += 1
    return results # a list with two tuples [(),()]. Each tuple contains lists of its books... of its search






def main():
    root = Tk()
    MainWindow(root)

    root.mainloop()


main()
